package edu.sc.seis.sod.bag;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import edu.sc.seis.sod.mock.Defaults;
import edu.sc.seis.sod.mock.seismogram.MockSeismogram;
import edu.sc.seis.sod.model.common.DistAz;
import edu.sc.seis.sod.model.common.Location;
import edu.sc.seis.sod.model.common.MicroSecondDate;
import edu.sc.seis.sod.model.common.Orientation;
import edu.sc.seis.sod.model.seismogram.LocalSeismogramImpl;

/**
 * Generated by JUnitDoclet, a tool provided by ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org and www.objectfab.de for
 * informations about the tool, the licence and the authors.
 */
public class RotateTest  {


    float[] origx;

    float[] origy;

    protected void setUp() throws Exception {
        origx = new float[3];
        origy = new float[3];
        origx[0] = 0;
        origy[0] = 0;
        origx[1] = 1;
        origy[1] = 1;
        origx[2] = .5f;
        origy[2] = -.5f;
    }

    protected void tearDown() throws Exception {
        origx = null;
        origy = null;
    }

    @Test
    public void testRotate() throws Exception {
        float[] x = new float[origx.length];
        System.arraycopy(origx, 0, x, 0, x.length);
        float[] y = new float[origy.length];
        System.arraycopy(origy, 0, y, 0, y.length);
        Rotate.rotate(x, y, -1 * Math.PI / 2); // 90 degrees
        assertEquals(0, x[0], 0.0001);
        assertEquals(0, y[0], 0.0001);
        assertEquals(1, x[1], 0.0001);
        assertEquals(-1, y[1], 0.0001);
        assertEquals(" x from (.5, -.5)", -.5, x[2], 0.0001);
        assertEquals(" y from (.5, -.5)", -.5, y[2], 0.0001);
        Rotate.rotate(x, y, Math.PI / 2); // inverse transform
        assertArrayEquals(origx, x, 0.0001f);
    }

    public void testRotateGCP() throws Exception {
        MicroSecondDate now = new MicroSecondDate();
        // both spikes are same, so 45 degree part motion e and n
        LocalSeismogramImpl xSeis = MockSeismogram.createSpike(now);
        LocalSeismogramImpl ySeis = MockSeismogram.createSpike(now);
        Location staLoc = new Location(55.3f,
                                       -3.2f,
                                       Defaults.ZERO_K,
                                       Defaults.ZERO_K);
        Location evtLoc = new Location(36.52f,
                                       71.23f,
                                       Defaults.ZERO_K,
                                       Defaults.ZERO_K);
        float[][] ans = Rotate.rotateGCP(xSeis, ySeis, staLoc, evtLoc);
        DistAz distAz = new DistAz(staLoc, evtLoc);
        assertEquals(" transverse ",
                     100 * Math.sqrt(2)
                             * Math.sin(Rotate.dtor(distAz.getBaz() - 45)),
                     ans[0][0],
                     0.001f);
        assertEquals(" radial ",
                     -100 * Math.sqrt(2)
                             * Math.cos(Rotate.dtor(distAz.getBaz() - 45)),
                     ans[1][0],
                     0.001f);
    }

    public void testRotateGCPWithOrientation() throws Exception {
        MicroSecondDate now = new MicroSecondDate();
        // both spikes are same, so 45 degree part motion e and n
        LocalSeismogramImpl xSeis = MockSeismogram.createSpike(now);
        Orientation xOrient = new Orientation(135, 0);
        LocalSeismogramImpl ySeis = MockSeismogram.createSpike(now);
        Orientation yOrient = new Orientation(45, 0);
        Location staLoc = new Location(0f,
                                       0f,
                                       Defaults.ZERO_K,
                                       Defaults.ZERO_K);
        Location evtLoc = new Location(90f,
                                       0f,
                                       Defaults.ZERO_K,
                                       Defaults.ZERO_Kl);
        LocalSeismogramImpl[] ans = Rotate.rotateGCP(xSeis, xOrient, ySeis, yOrient, staLoc, evtLoc, "T", "R");
        assertEquals(" transverse ",
                     -100 * Math.sqrt(2),
                     ans[0].get_as_floats()[0],
                     0.001f);
        assertEquals(" radial ",
                     0,
                     ans[1].get_as_floats()[0],
                     0.001f);
        // try with x and y swapped, ans should be same
        xOrient = new Orientation(45, 0);
        yOrient = new Orientation(135, 0);
        ans = Rotate.rotateGCP(xSeis, xOrient, ySeis, yOrient, staLoc, evtLoc, "T", "R");
        assertEquals(" transverse ",
                     -100 * Math.sqrt(2),
                     ans[0].get_as_floats()[0],
                     0.001f);
        assertEquals(" radial ",
                     0,
                     ans[1].get_as_floats()[0],
                     0.001f);
    }
    
    public void testRotateGCPXAxis() throws Exception {
        MicroSecondDate now = new MicroSecondDate();
        // both spikes are same, so 45 degree part motion e and n
        LocalSeismogramImpl xSeis = MockSeismogram.createSpike(now);
        LocalSeismogramImpl ySeis = MockSeismogram.createSpike(now);
        Location staLoc = new Location(0f,
                                       0f,
                                       Defaults.ZERO_K,
                                       Defaults.ZERO_K);
        Location evtLoc = new Location(0f,
                                       10f,
                                       Defaults.ZERO_K,
                                       Defaults.ZERO_K);
        float[][] ans = Rotate.rotateGCP(xSeis, ySeis, staLoc, evtLoc);
        assertEquals(" transverse ", 100, ans[0][0], 0.001f);
        assertEquals(" radial ", -100, ans[1][0], 0.001f);
    }
    
    public void testAreRotatable() {
        Orientation xOrient = new Orientation(88.3f, 0);
        Orientation yOrient = new Orientation(0, 0);
        float toleranceDegrees = 5f;
        
        assertTrue("test 0, 0 and 88.3,0", Rotate.areRotatable( xOrient,  yOrient,  toleranceDegrees));
    }
}
